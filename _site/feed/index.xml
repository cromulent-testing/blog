<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>The Cromulent Testing Blog</title>
 <link href="http://cromulent-testing.com/feed/index.xml" rel="self"/>
 <link href="http://cromulent-testing.com/"/>
 <updated>2015-02-22T12:53:52+11:00</updated>
 <id>http://cromulent-testing.com/</id>
 <author>
   <name>Ash Rollke</name>
 </author>
 <author>
   <name>Mike Bain</name>
 </author>
 <author>
   <name>Ryan Boucher</name>
 </author>

  
    
    
    
    

    
      
        <entry>
          <title>Update for Lulu customers</title>
          <link href="http://cromulent-testing.com//2013/05/04/update-for-lulu-customers.html"/>
          <updated>2013-05-04T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//2013/05/04/update-for-lulu-customers</id>
          <content type="html">
&lt;p&gt;We wanted to give a free PDF version of the book to those who bought from the &lt;a href=&quot;http://www.lulu.com/shop/mike-bain-and-ryan-boucher-and-ashley-rollke/what-you-need-to-know-about-dates-and-times-in-computing/paperback/product-20950623.html&quot;&gt;Lulu&lt;/a&gt;. On publication though, we discovered that Lulu gives us absolutely no information about our readers aside from a ‘number sold’ count. We are now making use of the thank you note Lulu can email new readers and let them know that they can get a PDF version. We still get no information about who buys the book but at least they get an email letting them know the PDF copy if available.&lt;/p&gt;

&lt;p&gt;This doesn’t help anyone that has already bought the physical print. If you bought a copy of our book from Lulu and would like a PDF version, please email us at &lt;a href=&quot;mailto:shop@cromulent-publishing.com&quot;&gt;shop@cromulent-publishing.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want a buy a PDF copy, then head right over to our &lt;a href=&quot;http://shop.cromulent-publishing.com/products/what-you-need-to-know-about-dates-and-times-in-computing&quot;&gt;online shop&lt;/a&gt; and get your personalised one.&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>A Cromulent Book</title>
          <link href="http://cromulent-testing.com//2013/04/23/a-cromulent-book.html"/>
          <updated>2013-04-23T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//2013/04/23/a-cromulent-book</id>
          <content type="html">
&lt;p&gt;We’ve written a book called What You Need to Know About Dates and Times in Computing. As you can probably tell by the title, this book explains what you need to know about dates and times in computing. We’ve written it to help get you quickly up to speed on this important yet commonly misunderstood topic.&lt;/p&gt;

&lt;p&gt;We would like you to buy a DRM free copy. It’s available at &lt;a href=&quot;http://cromulent-publishing.com/&quot;&gt;http://cromulent-publishing.com/&lt;/a&gt; as a pdf or if you like to read something made of wood, a physical copy is also available.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cromulent-publishing.com/&quot;&gt;&lt;img src=&quot;/images/cover.jpg&quot; alt=&quot;BOOK&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The book is 108 pages in length, contains pictures and is broken into the following parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why are dates and times so complicated?&lt;/li&gt;

&lt;li&gt;Key concepts e.g. &lt;em&gt;What is a point in time?, Time zones, Daylight saving time, UTC, Calendars and Leap years&lt;/em&gt;&lt;/li&gt;

&lt;li&gt;Dealing with user input e.g. &lt;em&gt;Getting a date from a user, Getting the time from a user and Recurring events&lt;/em&gt;&lt;/li&gt;

&lt;li&gt;Under the hood e.g. &lt;em&gt;Test automation, Converting time units, Getting to a second date, What if multiple date constructs are used?, Understanding the limits of time, Optionality and Sorting Dates&lt;/em&gt;&lt;/li&gt;

&lt;li&gt;Reality Bytes&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Stress Testing Results</title>
          <link href="http://cromulent-testing.com//2012/04/04/stress-testing-results.html"/>
          <updated>2012-04-04T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//2012/04/04/stress-testing-results</id>
          <content type="html">
&lt;p&gt;Cromulent Testing returns. Did you survive? Find out!&lt;/p&gt;

&lt;p&gt;You need your score from &lt;a href=&quot;http://cromulent-testing.com/2012/03/25/stress-testing.html&quot;&gt;this&lt;/a&gt; survey.&lt;/p&gt;

&lt;h2 id=&quot;25__35&quot;&gt;25 - 35&lt;/h2&gt;

&lt;p&gt;You appear impressively mellow, with almost no job stress and seem practically burnout proof&lt;/p&gt;

&lt;h2 id=&quot;36__50&quot;&gt;36 - 50&lt;/h2&gt;

&lt;p&gt;You express a low amount of job-related stress and are not likely to burn out. Look over those questions on which you scored a 3 or above and think about ways you can reduce the stresses involved.&lt;/p&gt;

&lt;h2 id=&quot;51__70&quot;&gt;51 - 70&lt;/h2&gt;

&lt;p&gt;You seem to be under a moderate amount of stress on the job and have a fair chance of burning out. For each question on which you scored a 4 or above, consider ways you can reduce the stresses involved. If possible, take action to improve your attitude or the situation surrounding those things that trouble you most.&lt;/p&gt;

&lt;h2 id=&quot;71__90&quot;&gt;71 - 90&lt;/h2&gt;

&lt;p&gt;You express a high amount of job-related stress and may have begun to burn out. Consider studying stress reduction, assertiveness, and burnout prevention. Mark each question on which you scored a 4 or above and rank them in order of their effect on you - beginning with the ones that bother you most. For at least your top three, make a list of ways you can reduce the stresses involved and take action to improve your attitude and/or situation. lf your body is reflecting this stress, get a medical checkup.&lt;/p&gt;

&lt;h2 id=&quot;91__up&quot;&gt;91 &amp;amp; up&lt;/h2&gt;

&lt;p&gt;You seem to be under a dangerous amount of stress and are probably nearing an advanced stage of burnout. Without some changes in your behaviours, attitude, and job situation your potential for succumbing to stress-related illness is high. Consider taking classes in stress reduction and burnout prevention and/or seeking professional help.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What the cromulent testers think:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While the above advice is sound, its focus is on changing attitudes. This is important, but sometimes the place you work needs to change or you need to change the place you work.&lt;/p&gt;

&lt;p&gt;Or in extreme cases, exercise.&lt;/p&gt;

&lt;p&gt;Peace out.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;‘Burnout Questionnaire’, Public Welfare, Vol. 39, No. 1, 1981, American Public Welfare Association&lt;/em&gt;&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Stress Testing</title>
          <link href="http://cromulent-testing.com//2012/03/25/stress-testing.html"/>
          <updated>2012-03-25T00:00:00+11:00</updated>
          <id>http://cromulent-testing.com//2012/03/25/stress-testing</id>
          <content type="html">
&lt;p&gt;Questions for stress testing… yourself.&lt;/p&gt;

&lt;p&gt;This questionnaire is taken from &lt;em&gt;“Public Welfare, Vol. 39, No. 1, 1981, American Public Welfare Association”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Rate the 25 questions according to the following scale: &lt;br /&gt; 1 = Never &lt;br /&gt; 2 = Rarely &lt;br /&gt; 3 = Sometimes &lt;br /&gt; 4 = Often &lt;br /&gt; 5 = Always &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;do_you&quot;&gt;Do you:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;worry at night and have trouble sleeping?&lt;/li&gt;

&lt;li&gt;feel less competent or effective then you used to feel?&lt;/li&gt;

&lt;li&gt;consider yourself under appreciated or ‘used’ on the job?&lt;/li&gt;

&lt;li&gt;always feel tired, even when you get enough sleep?&lt;/li&gt;

&lt;li&gt;dread going to work?&lt;/li&gt;

&lt;li&gt;get angry and irritated easily?&lt;/li&gt;

&lt;li&gt;have recurring headaches, stomach aches, or lower back pain?&lt;/li&gt;

&lt;li&gt;feel overwhelmed?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;are_you&quot;&gt;Are you:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;always watching the clock?&lt;/li&gt;

&lt;li&gt;avoiding conversation with co-workers?&lt;/li&gt;

&lt;li&gt;rigidly applying rules without considering more creative solutions?&lt;/li&gt;

&lt;li&gt;increasing your use of alcohol or drugs?&lt;/li&gt;

&lt;li&gt;automatically expressing negative attitudes?&lt;/li&gt;

&lt;li&gt;excessively absent?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;does_your_job&quot;&gt;Does your job:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;overload you with work?&lt;/li&gt;

&lt;li&gt;deny you breaks, lunch time, sick leave or vacation?&lt;/li&gt;

&lt;li&gt;demand long shifts and frequent overtime?&lt;/li&gt;

&lt;li&gt;pay too little?&lt;/li&gt;

&lt;li&gt;lack access to a social-professional support group?&lt;/li&gt;

&lt;li&gt;depend on capricious funding sources?&lt;/li&gt;

&lt;li&gt;not have enough funds to accomplish agency goals?&lt;/li&gt;

&lt;li&gt;lack clear guidelines?&lt;/li&gt;

&lt;li&gt;entail so many different tasks that you feel fragmented?&lt;/li&gt;

&lt;li&gt;require you to deal with rapid [program] changes?&lt;/li&gt;

&lt;li&gt;Demand coping with an angry public?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tally your score.&lt;/p&gt;

&lt;p&gt;Cliffhanger! Find out if you’ll survive next post!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;‘Burnout Questionnaire’, Public Welfare, Vol. 39, No. 1, 1981, American Public Welfare Association&lt;/em&gt;&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Testing sans testers</title>
          <link href="http://cromulent-testing.com//2012/02/16/testing-sans-testers.html"/>
          <updated>2012-02-16T00:00:00+11:00</updated>
          <id>http://cromulent-testing.com//2012/02/16/testing-sans-testers</id>
          <content type="html">
&lt;p&gt;Even without testers on the team, you still need to test, or your customers will.&lt;/p&gt;

&lt;p&gt;Here are some ways the team can help fill the gap:&lt;/p&gt;

&lt;p&gt;Right at the start:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow work flows until it’s understood what needs to be done. &lt;a href=&quot;http://en.wikipedia.org/wiki/Swim_lane&quot;&gt;Swim lanes&lt;/a&gt; help.&lt;/li&gt;

&lt;li&gt;Think edge cases. Do they reveal new scope or change the design?&lt;/li&gt;

&lt;li&gt;Find out why you’re doing what you’re doing&lt;/li&gt;

&lt;li&gt;Remember where similar projects have gone wrong. Appear smart by telling others as if you just thought of it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before people start &lt;a href=&quot;http://4.bp.blogspot.com/-5jGvSfCRDjY/TxgU9VUwLCI/AAAAAAAAAIM/ERK2V8i7VHY/s400/Programming.gif&quot;&gt;coding&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What’s the least you can do to responsibly meet the requirements?&lt;/li&gt;

&lt;li&gt;Draw the possible paths, what happens at the end of each one?&lt;/li&gt;

&lt;li&gt;What assumptions are you making? How can you &lt;a href=&quot;http://cromulent-testing.com/2011/09/22/challenging-assumptions.html&quot;&gt;challenge&lt;/a&gt; them?&lt;/li&gt;

&lt;li&gt;How will you know when you’re done?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Testing stuff works during and afterwards:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://img.izismile.com/img/img3/20100316/moar_23.jpg&quot;&gt;Moar&lt;/a&gt; automation. Developers rock at this.&lt;/li&gt;

&lt;li&gt;Run a tight ship; &lt;a href=&quot;http://www.youtube.com/watch?v=DKJsSPATDLY&quot;&gt;check your own work&lt;/a&gt; as you go&lt;/li&gt;

&lt;li&gt;Collaborate with your colleagues. Let them see your tests. Do handovers.&lt;/li&gt;

&lt;li&gt;Rotate, it’s best if someone else tests your work&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You probably also want to &lt;a href=&quot;http://learn.cromulent-testing.com/&quot;&gt;read up&lt;/a&gt; on user interaction/performance/security/infrastructure testing.&lt;/p&gt;

&lt;p&gt;Go for coffee and discuss how to test tricky problems. Work as a team. Share ideas. Get in there and have a good time. We still test because it’s fun.&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Your Mum Doesn't Work Here</title>
          <link href="http://cromulent-testing.com//2012/01/19/your_mum_doesnt_work_here.html"/>
          <updated>2012-01-19T00:00:00+11:00</updated>
          <id>http://cromulent-testing.com//2012/01/19/your_mum_doesnt_work_here</id>
          <content type="html">
&lt;p&gt;Dear Devs,&lt;/p&gt;

&lt;p&gt;Have you ever had code bounce immediately out of test because it just didn’t work? It’s messy and wastes a lot time. You’re expecting the tester to do all your testing, a common mistake. We’re not asking you to do two jobs, with a little effort you can tidy as you go, catching these basic problems yourself.&lt;/p&gt;

&lt;p&gt;The following are helpful, let our conscience be your guide.&lt;/p&gt;

&lt;p&gt;Before you start work, check what you’re doing makes sense. Talk it over, ask who, what, where, when and why. Verify that what you’re going to do is what they want.&lt;/p&gt;

&lt;p&gt;While coding, ensure the code actually does what you believe it does. Stray from the happy path; what could a user do by mistake? How could a user cheat the system? Ask questions like “What happens if I…” and get answers. Not all who wander are lost.&lt;/p&gt;

&lt;p&gt;Your development skills will help you. Use your knowledge of code to bend it a little. Does any part of the code make you feel queasy? Start there.&lt;/p&gt;

&lt;p&gt;Check white space, min and max lengths, validations, mandatory and optional fields, nulls. It’s literally (not figuratively) painful for testers to report these kinds of problems. Just make sure it works. Please.&lt;/p&gt;

&lt;p&gt;To conclude, your forays into testing won’t replace a competent tester but it will save them time and heart ache; let them focus on more devious aspects their craft.&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Finding Semantic Problems</title>
          <link href="http://cromulent-testing.com//2011/11/10/finding_semantic_problems.html"/>
          <updated>2011-11-10T00:00:00+11:00</updated>
          <id>http://cromulent-testing.com//2011/11/10/finding_semantic_problems</id>
          <content type="html">
&lt;p&gt;Last post we talked about common semantic problems. How can you find and prevent these insidious troublemakers?&lt;/p&gt;

&lt;p&gt;In an ideal environment, with an &lt;a href=&quot;http://specificationbyexample.com/&quot;&gt;executable specification&lt;/a&gt;, using &lt;a href=&quot;http://domaindrivendesign.org/node/132&quot;&gt;ubiquitous language&lt;/a&gt;, most of these problems are solved before they occur.&lt;/p&gt;

&lt;p&gt;When are things ideal? Usually never, so what do we do without any of the above in place.&lt;/p&gt;

&lt;p&gt;First, seek understanding. You can’t be picky; to test you need understanding. Talk to people in the know, find out how they view the world. Test their assumptions with &lt;a href=&quot;http://cromulent-testing.com/2011/08/25/mule-testing-proactively-testing-assumptions.html&quot;&gt;mule testing&lt;/a&gt;. Never underestimate the wisdom of a crowd around a whiteboard. In extreme cases you could even start reading.&lt;/p&gt;

&lt;p&gt;Can we create a bit of certainty? Take it all in, sift through the information, does it sit right in your head? Are there any gaps?&lt;/p&gt;

&lt;p&gt;Always test. Does what you know fit with the evidence? Apply what you know in new contexts, an address means different things depending on what side of the envelope it’s on.&lt;/p&gt;

&lt;p&gt;Once you understand, share it, talk about it, make it part of your tests and code. Don’t stop now, you’re on a roll -you need to continuously build and re-enforce that shared understanding.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Understanding is the knowing of misunderstanding”&lt;/em&gt; ― Zivarnna Smithies&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>What does it mean?</title>
          <link href="http://cromulent-testing.com//2011/10/27/what-does-it-mean.html"/>
          <updated>2011-10-27T00:00:00+11:00</updated>
          <id>http://cromulent-testing.com//2011/10/27/what-does-it-mean</id>
          <content type="html">
&lt;p&gt;Testing something works correctly (technical correctness) is all well and good, but testing meaning (semantic correctness) is the mark of a true tester. Without it, you’re not much more than a glorified developer.&lt;/p&gt;

&lt;p&gt;Here are some common semantic problems expressed using a progressively strained &lt;em&gt;Star Wars&lt;/em&gt; metaphor.&lt;/p&gt;

&lt;p&gt;You’re feeling nostalgic and ask a friend to put on a &lt;em&gt;Star Wars&lt;/em&gt; movie, they put on episode one, &lt;em&gt;The Phantom Menace&lt;/em&gt;. While technically correct, it is a &lt;em&gt;Star Wars&lt;/em&gt; movie, it isn’t what you meant, it was semantically wrong.&lt;/p&gt;

&lt;p&gt;Problem: No shared understanding of what ‘&lt;em&gt;Star Wars&lt;/em&gt;’ means.&lt;/p&gt;

&lt;p&gt;You clarify by saying, “&lt;a href=&quot;http://www.youtube.com/watch?NR=1&amp;v=WWaLxFIVX1s&quot;&gt;Noooooo&lt;/a&gt;, put the first &lt;em&gt;Star Wars&lt;/em&gt; episode on” the friend stares at you confused and says “we’re watching it”.&lt;/p&gt;

&lt;p&gt;Problem: the meaning of the first &lt;em&gt;Star Wars&lt;/em&gt; episode has evolved over time, does it mean episode 4, the first movie? Or episode 1, the first prequel? Your friend grew up in a different time, they may even like Jar Jar.&lt;/p&gt;

&lt;p&gt;You’ve finished your &lt;em&gt;Star Wars&lt;/em&gt; marathon, your friend says. “lets watch another &lt;em&gt;Star Wars&lt;/em&gt; film” and puts on &lt;em&gt;Caravan of Courage&lt;/em&gt;. Neither of you enjoy the film because it’s not a &lt;em&gt;Star Wars&lt;/em&gt; film. It’s simply set in the &lt;em&gt;Star Wars&lt;/em&gt; universe.&lt;/p&gt;

&lt;p&gt;Problem: In this case you both had a shared understanding, it was just wrong. So very wrong.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=FxKtZmQgxrI&quot;&gt;Now watch this.&lt;/a&gt;&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>the limits of automation</title>
          <link href="http://cromulent-testing.com//2011/09/29/the-limits-of-automation.html"/>
          <updated>2011-09-29T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//2011/09/29/the-limits-of-automation</id>
          <content type="html">
&lt;p&gt;Automation testing is frequently evangelised as the cure-all of software quality woes. However automated testing has limits on its effectiveness. Understanding these limits will keep us from trying to automate something that should never be.&lt;/p&gt;

&lt;h3 id=&quot;scoping_limitations&quot;&gt;Scoping Limitations&lt;/h3&gt;

&lt;p&gt;In an automated test, deviations from the norm are not necessarily reported as failures. We can work around that by writing more tests, each of them focusing on one factor of the system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Practical Limitations&lt;/strong&gt;: automation comes with a maintenance cost as the product evolves. This places practicality limits around what we automate. It’s not feasible to automate everything, as we must maintain everything. We need to be prudent about what tests we want to keep.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technological Limitations&lt;/strong&gt;: some testing activities are just not possible to automate, like user experience testing. As soon as we move into the area where subjective qualities are being measured automation breaks down.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usefulness Limitations&lt;/strong&gt;: automated tests do not provide equal value to the team. The high use post-deploy smoke test is more valuable than checking whether the user name field supports “Travis” as well as “Cornelius”. Just like we risk and value assess our manual testing effort we should be doing the same with automation.&lt;/p&gt;

&lt;h3 id=&quot;conflicting_limitations&quot;&gt;Conflicting Limitations&lt;/h3&gt;

&lt;p&gt;The limitations we touched on they fall into two categories; those that force us to be smarter about the small set of tests we automate and those that drive us to want more tests. We can’t have both. How we deal with this is what makes a good tester.&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>challenging assumptions</title>
          <link href="http://cromulent-testing.com//2011/09/22/challenging-assumptions.html"/>
          <updated>2011-09-22T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//2011/09/22/challenging-assumptions</id>
          <content type="html">
&lt;p&gt;Many bugs can be prevented by challenging assumptions. Challenging the assumptions every one holds as well as paying attention to the seemingly small ones, will yield great results.&lt;/p&gt;

&lt;p&gt;Small things can be the most dangerous as they tend to go unnoticed, then gang up on you. It’s more common for projects to get overwhelmed by a build up of small things. The devil’s in the detail.&lt;/p&gt;

&lt;p&gt;To find assumptions, listen to the way people speak. Assumptions can found in sentences that contain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;must, always, mandatory, required&lt;/li&gt;

&lt;li&gt;impossible, inconceivable, never&lt;/li&gt;

&lt;li&gt;should, ought&lt;/li&gt;

&lt;li&gt;doesn’t make sense&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Doesn’t make sense is a favourite.&lt;/em&gt; This planet is filled with humans who do many things that make more money than sense.&lt;/p&gt;

&lt;h3 id=&quot;an_example&quot;&gt;An Example!&lt;/h3&gt;

&lt;p&gt;Consider the following story:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As a customer&lt;/em&gt; &lt;br /&gt; &lt;em&gt;I want to know the average activity&lt;/em&gt; &lt;br /&gt; &lt;em&gt;So that I can compare this month’s activity against the average&lt;/em&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Sounds simple… but if you look a little deeper:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What do we mean by ‘know’?&lt;/li&gt;

&lt;li&gt;What do we mean by average? &lt;a href=&quot;http://en.wikipedia.org/wiki/Geometric_mean&quot;&gt;Geometric&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Harmonic_mean&quot;&gt;harmonic&lt;/a&gt; or &lt;a href=&quot;http://en.wikipedia.org/wiki/Arithmetic_mean&quot;&gt;arithmetic mean&lt;/a&gt;?&lt;/li&gt;

&lt;li&gt;What activity?&lt;/li&gt;

&lt;li&gt;What do you mean by month? &lt;a href=&quot;http://en.wikipedia.org/wiki/Month#Months_in_various_calendars&quot;&gt;How many days are in it?&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;Over what time span is the average calculated? Does it &lt;a href=&quot;http://en.wikipedia.org/wiki/Moving_average&quot;&gt;move&lt;/a&gt;?&lt;/li&gt;

&lt;li&gt;How are the numbers rounded? How is the &lt;a href=&quot;http://en.wikipedia.org/wiki/Rounding#Tie-breaking&quot;&gt;tie broken&lt;/a&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember, the most hidden assumptions are those you yourself hold. As a tester, you need to challenge yourself and question everything.&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Ask better questions - Listen!</title>
          <link href="http://cromulent-testing.com//2011/09/08/ask-better-questions-listen.html"/>
          <updated>2011-09-08T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//2011/09/08/ask-better-questions-listen</id>
          <content type="html">
&lt;p&gt;Everything that follows is a result of what you see here.&lt;/p&gt;

&lt;p&gt;Testing relies heavily on asking questions. Questions allow us to challenge assumptions, confirm what we already know and uncover the unknown. Coming up with the right questions and understanding what to do with the answers is a real skill. Consider yourself a detective or scientist, whichever you find more motivating.&lt;/p&gt;

&lt;p&gt;Have you read/seen ‘i Robot’? In the story, Detective Spooner has to solve a murder. It starts with him questioning a hologram of the victim, Dr Lanning. The hologram is a simple program, it can only give limited responses to specific questions.&lt;/p&gt;

&lt;p&gt;Detective Spooner collects pieces of information, assesses them and re-evaluates what he knows. He uses that to piece together the right questions, fueling the cycle until he uncovers the fundamental flaw that had made it into (mass) production.&lt;/p&gt;

&lt;p&gt;He could have asked the hologram many mindless questions, but that may never have allowed him to reach the right one. Testing can be as simple as asking questions but they are futile if you’re not listening to the answers and constantly evaluating what you know.&lt;/p&gt;

&lt;p&gt;Beware of robots.&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Mule Specs - automated assumption testing</title>
          <link href="http://cromulent-testing.com//2011/09/04/mule-specs-automated-assumption-testing.html"/>
          <updated>2011-09-04T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//2011/09/04/mule-specs-automated-assumption-testing</id>
          <content type="html">
&lt;p&gt;In our last post we talked about &lt;a href=&quot;http://cromulent-testing.com/2011/08/25/mule-testing-proactively-testing-assumptions.html&quot;&gt;mule testing&lt;/a&gt;. Assumptions need automation because they’re the foundation our systems are built upon; they can change at anytime. Mule specs are a way to automate mule tests.&lt;/p&gt;

&lt;p&gt;You can use any automated testing tool - the one your project already uses is probably fine. Unless it’s QTP. Below is the example from the &lt;a href=&quot;http://cromulent-testing.com/2011/08/25/mule-testing-proactively-testing-assumptions.html&quot;&gt;last post&lt;/a&gt; in RSpec using the sequel gem.&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - when spawning ‘pygmentize’&lt;/p&gt;

&lt;p&gt;We use two helper functions as we phrase our tests to expect either at least one result or no results.&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - when spawning ‘pygmentize’&lt;/p&gt;

&lt;h3 id=&quot;getting_production_data&quot;&gt;Getting production data&lt;/h3&gt;

&lt;p&gt;Mule tests require prod data, the older and less realistic it is, the less certainty you have in your assumptions. Running Mule Specs on production data doesn’t mean running them on production, that’s a really bad idea. Copy the data elsewhere before execution. We arranged a sync from production every night and our Mule Specs run against it. So, when we arrive in the morning we know that as of yesterday, all our assumptions are still true.&lt;/p&gt;

&lt;p&gt;Mule specs give us more than just a way of verifying assumptions. Written well, with good reporting, you produce verified documentation that’s updated every night when the mules run. Get the entire team involved. Ensure the analysts note their assumptions as they go and have the testers and developers implement them.&lt;/p&gt;

&lt;p&gt;Follow your heart, run with the mules every night.&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Mule Testing - proactively testing assumptions</title>
          <link href="http://cromulent-testing.com//2011/08/25/mule-testing-proactively-testing-assumptions.html"/>
          <updated>2011-08-25T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//2011/08/25/mule-testing-proactively-testing-assumptions</id>
          <content type="html">
&lt;p&gt;We were building a shiny new system that relied on data from a poorly understood legacy monster. Assumptions about this data were baked into our system. These unchallenged assumptions turned out to be wrong. Our shiny new system was no longer so shiny.&lt;/p&gt;

&lt;p&gt;The wider the belief in the assumption, the more it’s en-grained in the business, the greater the need for it to be tested.&lt;/p&gt;

&lt;p&gt;Why trust when you can know?&lt;/p&gt;

&lt;p&gt;An example Mule test (&lt;em&gt;it’s blogging by example!&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Start with the assumption: &lt;em&gt;“All products must have a category”&lt;/em&gt; Find a way to challenge or validate it. In this case we would run a simple query against production data:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - when spawning ‘pygmentize’&lt;/p&gt;

&lt;p&gt;If the assumption holds true then rest easy. If it turns out to be false, congratulations you have just prevented a major bug. Share it with the team and update your old assumption to include the new facts. In this example &lt;em&gt;“A product does not require a category”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Mule testing has limits. It only helps you test assumptions that you know about. If the magic combination of data that breaks your assumptions doesn’t yet exist, it won’t fail. It only works with access to the latest production data.&lt;/p&gt;

&lt;p&gt;Why the name mule testing? Because some people got the wrong idea when we called it ass testing.&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Validation and Verification</title>
          <link href="http://cromulent-testing.com//2011/08/18/validation-and-verification.html"/>
          <updated>2011-08-18T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//2011/08/18/validation-and-verification</id>
          <content type="html">
&lt;p&gt;So what is the difference?&lt;/p&gt;

&lt;p&gt;It’s simple really, as long as you don’t read the plethora of arduous ISO and IEEE standards.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Verification&lt;/strong&gt; is making sure what we built is working as we intended. This is acceptance testing, executable specifications and exploratory testing. These are testing fundamentals.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Validation&lt;/strong&gt; is asking the question, did we build the right thing? There is little point in building a entirely configurable system if the owners have no want or need to.&lt;/p&gt;

&lt;p&gt;Our definitions, like most of the ones we’ve found, are defined in the past tense, which illustrates the real problem. Why wait to ask such important questions? It’s &lt;a href=&quot;http://www.youtube.com/watch?v=eZeYVIWz99I&quot;&gt;Madness!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ask these questions early and often, then you’ll never have to bother with these definitions again:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are building the right thing?&lt;/li&gt;

&lt;li&gt;Is it working?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Defining your testing as verification or validation is largely irrelevant in the grand scheme of things. Dissecting testing into small chunks is a useful way to learn new things, however in the real world, evolving your expertise to include new things, like user experience design, is more effective.&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Chicken Little</title>
          <link href="http://cromulent-testing.com//2011/08/07/chicken-little.html"/>
          <updated>2011-08-07T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//2011/08/07/chicken-little</id>
          <content type="html">
&lt;p&gt;&lt;em&gt;Once upon a time there was a tiny chicken [tester] named Chicken Little. One day Chicken Little was scratching in the garden when an acorn fell on her head.&lt;/em&gt; &lt;em&gt;“Oh,” cried Chicken Little, “The sky is falling! I must go tell the king [project manager].”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It’s important to remember that this is a tester who really cares, we need to harness their passion. A panicked approach causes stress and real problems get lost in the noise. The tester will lose credibility, become marginalised and burnout.&lt;/p&gt;

&lt;h2 id=&quot;harness_the_passion&quot;&gt;Harness the passion!&lt;/h2&gt;

&lt;p&gt;We need to work closely with these testers who are emotionally invested and vulnerable to criticism. How they arrived at this behaviour is irrelevant. Two things we’ve found that help are to teach them prioritisation and to value quality over quantity.&lt;/p&gt;

&lt;h2 id=&quot;teach_them_to_prioritise&quot;&gt;Teach them to prioritise&lt;/h2&gt;

&lt;p&gt;Ask them to rank bugs in the order they would like them fixed. If they struggle, begin by ranking one critical and one trivial bug. This forces them to understand some bugs are more important than others. Once they’re all ranked, discuss at which point we could release with the remaining bugs.&lt;/p&gt;

&lt;h2 id=&quot;value_them&quot;&gt;Value them&lt;/h2&gt;

&lt;p&gt;Publicly acknowledge them for finding the good bugs. Let them see their good bugs being fixed. Recognise their less important bugs and use their prioritisation to explain why they won’t be fixed.&lt;/p&gt;

&lt;p&gt;Teach them how to find the important bugs … coming soon&lt;/p&gt;

&lt;p&gt;&lt;em&gt;…and they all lived happily ever after.&lt;/em&gt;&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Testing in the deep end</title>
          <link href="http://cromulent-testing.com//2011/07/29/testing-in-the-deep-end.html"/>
          <updated>2011-07-29T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//2011/07/29/testing-in-the-deep-end</id>
          <content type="html">
&lt;p&gt;Testers don’t have the luxury of a friendly group of people checking our work. Instead we get an angry mob with torches and pitch forks. We have to be honest about our limitations. It’s better you reveal them at the beginning, then get bitten by them at the end.&lt;/p&gt;

&lt;p&gt;As a rule: If you’re testing something that you can’t explain to someone else, then you probably don’t understand enough to effectively test it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you approach testing something you don’t understand?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Find people who understand it better than you. Talk to them. If you can’t find real people, find Google. Regardless of your source, cross reference information and consider the author’s bias.&lt;/p&gt;

&lt;p&gt;There are fundamental techniques in testing that apply to most problems. Use them to explore, break it down and ask good questions. A common testing pattern is:&lt;/p&gt;

&lt;p&gt;Given &lt;em&gt;precondition&lt;/em&gt; &lt;br /&gt; When &lt;em&gt;action&lt;/em&gt; &lt;br /&gt; Then &lt;em&gt;expected thing&lt;/em&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Use this to think about what you need to set up, what you need to do and what results you should expect.&lt;/p&gt;

&lt;p&gt;Since we can’t know everything we’re always out of our depth to some extent. So &lt;a href=&quot;http://bit.ly/lOw9RM&quot;&gt;don’t panic&lt;/a&gt;. We have touched on three techniques to approach this problem: be honest, find someone who can help and fall back on your testing fundamentals.&lt;/p&gt;

&lt;p&gt;Sometimes the most intelligent thing you can say is “I don’t know”.&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Dealing with test fatigue</title>
          <link href="http://cromulent-testing.com//2011/07/21/dealing-with-test-fatigue.html"/>
          <updated>2011-07-21T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//2011/07/21/dealing-with-test-fatigue</id>
          <content type="html">
&lt;p&gt;Here are the problems we raised in our &lt;a href=&quot;http://cromulent-testing.com/2011/07/14/do-you-know-about-test-fatigue.html&quot;&gt;last post&lt;/a&gt; and ways we deal with them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;working overtime&lt;/strong&gt; - You can’t test tired. If you’re going to be working overtime for several hours, have a break. Take time away from the project and go out for dinner, like a second lunch. Adjust the workplace to your style, watch &lt;a href=&quot;http://www.youtube.com/watch?v=oHg5SJYRHA0&quot;&gt;YouTube&lt;/a&gt; together and take frequent communal breaks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;delivery pressures&lt;/strong&gt; - The more pressure the team is under, the more likely they are to make mistakes and the more you need to test. &lt;a href=&quot;http://bit.ly/lOw9RM&quot;&gt;DON’T PANIC.&lt;/a&gt; The less time you have the more you need to get it right the first time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;thrashing&lt;/strong&gt; - Make a task list of what needs doing and divvy up the work. Stop people from interrupting (think: cone of silence) by politely explaining the urgency of what you’re working on. Remember, prioritisation! It’s normally better to finish some things than to partially complete lots of them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;uninteresting work&lt;/strong&gt; - Spice up boring work by trying it in a new way. Any technique will do, invent your own or try something from your &lt;a href=&quot;http://cromulent-testing.com/&quot;&gt;favourite testing blog&lt;/a&gt;. You can make work fun.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mechanical work&lt;/strong&gt; - Automate it, computers love repetitive tasks. Even if you &lt;a href=&quot;http://cromulent-testing.com/2011/07/05/disposable-automation.html&quot;&gt;dispose of it later&lt;/a&gt;, you’re saving time. Delegate it to the development team, they love repetitive tasks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;bad practices &amp;amp; disenfranchisement&lt;/strong&gt; - Why are you doing this to yourself? Good testers are a rare breed. Other companies want you, we want you. If you can’t fix it, leave.&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Do you know about test fatigue?</title>
          <link href="http://cromulent-testing.com//2011/07/14/do-you-know-about-test-fatigue.html"/>
          <updated>2011-07-14T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//2011/07/14/do-you-know-about-test-fatigue</id>
          <content type="html">
&lt;blockquote&gt;
&lt;p&gt;Fatigue is a normal result of working, mental stress, overstimulation and understimulation, jet lag or active recreation, depression, and also boredom, disease and lack of sleep.[&lt;a href=&quot;http://en.wikipedia.org/wiki/Fatigue_(medical)&quot;&gt;1&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We could rewrite the above quote to be:&lt;/p&gt;

&lt;p&gt;Test fatigue is a normal result of testing, delivery pressures, thrashing, uninteresting work, disenfranchisement, mechanical work, bad practices and working overtime.&lt;/p&gt;

&lt;p&gt;What’s wrong with that?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;…mental fatigue, in turn, can manifest itself both as somnolence (decreased wakefulness), or just as a general decrease of attention, not necessarily including sleepiness. Decreased attention is known as ego depletion and occurs when the limited ‘self regulatory capacity’ is depleted. It may also be described as a more or less decreased level of consciousness. In any case, this can be dangerous when performing tasks that require constant concentration, such as driving a vehicle… [or testing][&lt;a href=&quot;http://en.wikipedia.org/wiki/Fatigue_(medical)&quot;&gt;1&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a big topic, we have a lot more to say…stay tuned.&lt;/p&gt;

&lt;p&gt;[1]: &lt;a href=&quot;http://en.wikipedia.org/wiki/Fatigue_(medical&quot;&gt;http://en.wikipedia.org/wiki/Fatigue_(medical)&lt;/a&gt;&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Disposable Automation</title>
          <link href="http://cromulent-testing.com//2011/07/05/disposable-automation.html"/>
          <updated>2011-07-05T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//2011/07/05/disposable-automation</id>
          <content type="html">
&lt;p&gt;In our experience, testers have an unhealthy attachment to automated tests. We’re going to talk about times when throwaway automation is really helpful.&lt;/p&gt;

&lt;h3 id=&quot;record_and_playback&quot;&gt;Record and playback&lt;/h3&gt;

&lt;p&gt;Sick and tired of clicking through page after page to find what you want to test? Record your path, run it, and test what actually matters. Record and playback is quick and easy. The code it creates will make your eyes bleed which doesn’t matter as long you dump it as soon as you’re done with it.&lt;/p&gt;

&lt;h3 id=&quot;exploratory_automation&quot;&gt;Exploratory Automation&lt;/h3&gt;

&lt;p&gt;Sometimes you need to test things that can’t easily be done manually. We were exploring a bug lurking deep within a server and found ourselves manually crafting HTTP headers in telnet. We realised it’s a lot easier to do this in code. So we did. We found the bug and threw the automation away.&lt;/p&gt;

&lt;h3 id=&quot;permutations_and_combinations&quot;&gt;Permutations and Combinations&lt;/h3&gt;

&lt;p&gt;There’s an adage that you can’t test everything. Sometimes, your tester senses tell you to cover a part of the system thoroughly. This can be done with a script that generates the various combinations. Run it over night and don’t leave your number.&lt;/p&gt;

&lt;p&gt;Automation you decide to keep, you decide to maintain and “The things you own, end up owning you.” Tyler Durden&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>testing integration projects</title>
          <link href="http://cromulent-testing.com//2011/06/27/testing-integration-projects.html"/>
          <updated>2011-06-27T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//2011/06/27/testing-integration-projects</id>
          <content type="html">
&lt;p&gt;When problems arise (often) in integration projects (all of them) a lot of time and energy is spent arguing who’s at fault. This is as about as useful as arguing whose side of the boat has a leak.&lt;/p&gt;

&lt;p&gt;It’s common for Team Upstream and Team Downstream to test their systems in isolation. However, the problems lurk in international waters, between teams. We must test the integration. Integration testing is like voting, do it early and do it often.&lt;/p&gt;

&lt;p&gt;Traditionally, groups are brought together through marriage. In lieu of this, we’ve had a lot of success sending emissaries to work with other teams. This doesn’t mean endless meetings. It means joining forces and working together, reducing the us and them mentality.&lt;/p&gt;

&lt;p&gt;We may be told that our responsibility ends with our system boundary, stay out of international waters. We may be told that it will all just work if we build it to spec. The reality is that we need to make sure the entire system works across all teams.&lt;/p&gt;

&lt;p&gt;Current thinking is that our brains are geared towards living in small family groups, in competition with others. This distorts our view of other teams, causing us to presume they are either malicious or incompetent. We even dehumanise them, giving them nicknames like Team Downstream, instead of recognising them as fellow people doing the same job as us.&lt;/p&gt;

&lt;p&gt;As the elders say: you must test the integration (and take these mushrooms!)&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>what we do in the case of an automation backlog?</title>
          <link href="http://cromulent-testing.com//2011/06/21/what-we-do-in-the-case-of-an-automation-backlog.html"/>
          <updated>2011-06-21T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//2011/06/21/what-we-do-in-the-case-of-an-automation-backlog</id>
          <content type="html">
&lt;p&gt;The behaviour people have when they are behind is often more damaging then being behind. We’re going to focus on a couple of ways we can climb out of this hole.&lt;/p&gt;

&lt;p&gt;Firstly, get the team to help us catch up!&lt;/p&gt;

&lt;p&gt;Moving the culture to a test driven approach will fix the backlog and prevent it from happening. As changing culture can be long term, we can use &lt;a href=&quot;http://leanandkanban.wordpress.com/2009/05/14/wip-and-limits/&quot;&gt;WIP&lt;/a&gt; (Work In Progress) limits; an easily implemented tool from Lean, to make the team aware of the problem and to move in the right direction.&lt;/p&gt;

&lt;p&gt;For example, once the tester’s WIP limit is reached, before anyone can start more work, they need to help the tester finish something. Get the team to stop starting and to start finishing. Optimizing the team as a whole increases work flow more than optimizing individual components.&lt;/p&gt;

&lt;p&gt;The second tactic is damage control, and will stop us chasing our tails until the end of time. This approach assumes a team that is unwilling/unable to support the testers. For new work, we prioritise based on risk; covering the low priority work with mostly manual testing to stop the backlog from growing. To deal with the existing backlog, we write smoke tests to give us thin coverage and confidence over the functionality, filling in the gaps based on priority, balanced with the new work coming in.&lt;/p&gt;

&lt;p&gt;More on information on WIP limits: &lt;a href=&quot;http://leanandkanban.wordpress.com/2009/05/14/wip-and-limits/&quot;&gt;http://leanandkanban.wordpress.com/2009/05/14/wip-and-limits/&lt;/a&gt;&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>when should we be doing automated testing?</title>
          <link href="http://cromulent-testing.com//2011/06/14/when-should-we-be-doing-automation-testing.html"/>
          <updated>2011-06-14T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//2011/06/14/when-should-we-be-doing-automation-testing</id>
          <content type="html">
&lt;p&gt;Automated tests, that are written &lt;strong&gt;before&lt;/strong&gt; the code; capture the intention of the code, inform design decisions, provide rapid feedback and let us know when we are done. All of this gets us thinking about testing and ensuring that our code can be automated.&lt;/p&gt;

&lt;p&gt;One view of test automation is to write it &lt;strong&gt;after&lt;/strong&gt; the system code has been written so the automation has to cope with less change. We’ve found this view doesn’t hold up in practice, firstly we spend a lot of time reverse engineering the code to automate it. Secondly, if the code is changing then this is when we need test automation the most to provide us with a safety net.&lt;/p&gt;

&lt;p&gt;Automated tests that are written &lt;strong&gt;after&lt;/strong&gt; the code do not directly inform the design nor do they provide rapid feedback. When writing automated tests in this way we need to ask ourselves; why are we taking this approach?&lt;/p&gt;

&lt;p&gt;If we are doing it to provide test coverage or run in the CI build then we are coming to the party late. Without visibility into what automation already exists we could be duplicating test effort. If these tests will help us build a better product then they should be written &lt;strong&gt;before&lt;/strong&gt; the code.&lt;/p&gt;

&lt;p&gt;If we are using automation to do exploratory testing and we intend to throw the automation code away afterwards then we can write the tests &lt;strong&gt;after&lt;/strong&gt;. Not all automation needs to be kept it just has to help us explore.&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>a fear and loathing of testing</title>
          <link href="http://cromulent-testing.com//2011/06/10/a-fear-an-loathing-of-testing.html"/>
          <updated>2011-06-10T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//2011/06/10/a-fear-an-loathing-of-testing</id>
          <content type="html">
&lt;p&gt;&lt;strong&gt;Ash&lt;/strong&gt;: &lt;em&gt;We were somewhere around the waterfall, on the edge of the software lifecycle, when the tests began to take hold. I remember saying something like:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I feel a bit lightheaded. Maybe you should drive.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Suddenly, there was a terrible roar all around us, and the software was full of what looked like huge bugs, all swooping and screeching and diving around the computer, and a voice was screaming:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Holy Jesus. What are these goddamn bugs?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dr. Gonzo&lt;/strong&gt;: Did you say something?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ash&lt;/strong&gt;: Hm? Never mind. It’s your turn to test.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ash&lt;/strong&gt;: &lt;em&gt;No point in mentioning these bugs, I thought. Poor bastard will see them soon enough.&lt;/em&gt;&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Md Extension</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2011/04/12/md-extension.html"/>
          <updated>2011-04-12T23:07:09+10:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2011/04/12/md-extension</id>
          <content type="html">
&lt;p&gt;under default configuration, this post should get processed by the identity converter. By changing textile extension or markdown extension configuration parameters, you should be able to associate it with either of those converters&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Text Extension</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2011/04/12/text-extension.html"/>
          <updated>2011-04-12T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2011/04/12/text-extension</id>
          <content type="html"></content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Timezone Override</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2010/01/11/timezone-override.html"/>
          <updated>2010-01-11T00:07:09+11:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2010/01/11/timezone-override</id>
          <content type="html">&lt;p&gt;Post with a front matter time with timezone&lt;/p&gt;
&lt;p&gt;11 Jan 2010&lt;/p&gt;</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Time Override</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2010/01/11/time-override.html"/>
          <updated>2010-01-11T00:07:09+11:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2010/01/11/time-override</id>
          <content type="html">&lt;p&gt;Post with a front matter time&lt;/p&gt;
&lt;p&gt;11 Jan 2010&lt;/p&gt;</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Override Data</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2010/01/11/override-data.html"/>
          <updated>2010-01-11T00:07:09+11:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2010/01/11/override-data</id>
          <content type="html"></content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Date Override</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2010/01/10/date-override.html"/>
          <updated>2010-01-10T00:00:00+11:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2010/01/10/date-override</id>
          <content type="html">&lt;p&gt;Post with a front matter date&lt;/p&gt;
&lt;p&gt;10 Jan 2010&lt;/p&gt;</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Foo --- Bar</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2010/01/08/triple-dash.html"/>
          <updated>2010-01-08T00:00:00+11:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2010/01/08/triple-dash</id>
          <content type="html">
&lt;p&gt;Triple the fun!&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>No Yaml</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/06/22/no-yaml.html"/>
          <updated>2009-06-22T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/06/22/no-yaml</id>
          <content type="html">&lt;p&gt;No &lt;span class=&quot;caps&quot;&gt;YAML&lt;/span&gt;.&lt;/p&gt;</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Empty Yaml</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/06/22/empty-yaml.html"/>
          <updated>2009-06-22T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/06/22/empty-yaml</id>
          <content type="html">&lt;p&gt;Empty &lt;span class=&quot;caps&quot;&gt;YAML&lt;/span&gt;.&lt;/p&gt;</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Test title</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/win/2009/05/24/yaml-linebreak.html"/>
          <updated>2009-05-24T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/win/2009/05/24/yaml-linebreak</id>
          <content type="html">
&lt;p&gt;This is the content&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Some Tags</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/05/18/tags.html"/>
          <updated>2009-05-18T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/05/18/tags</id>
          <content type="html">&lt;p&gt;Awesome!&lt;/p&gt;</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>A Tag</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/05/18/tag.html"/>
          <updated>2009-05-18T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/05/18/tag</id>
          <content type="html">&lt;p&gt;Whoa.&lt;/p&gt;</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Some Tags</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/05/18/empty-tags.html"/>
          <updated>2009-05-18T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/05/18/empty-tags</id>
          <content type="html">&lt;p&gt;Awesome!&lt;/p&gt;</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>A Tag</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/05/18/empty-tag.html"/>
          <updated>2009-05-18T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/05/18/empty-tag</id>
          <content type="html">&lt;p&gt;Whoa.&lt;/p&gt;</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Hash</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/03/12/hash-%231.html"/>
          <updated>2009-03-12T00:00:00+11:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/03/12/hash-#1</id>
          <content type="html">
&lt;p&gt;Hashes are nice&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Category in YAML</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/01/27/empty-category.html"/>
          <updated>2009-01-27T00:00:00+11:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/01/27/empty-category</id>
          <content type="html">&lt;p&gt;Best &lt;strong&gt;post&lt;/strong&gt; ever&lt;/p&gt;</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Category in YAML</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/01/27/empty-categories.html"/>
          <updated>2009-01-27T00:00:00+11:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/01/27/empty-categories</id>
          <content type="html">&lt;p&gt;Best &lt;strong&gt;post&lt;/strong&gt; ever&lt;/p&gt;</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Category in YAML</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/01/27/category.html"/>
          <updated>2009-01-27T00:00:00+11:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/01/27/category</id>
          <content type="html">&lt;p&gt;Best &lt;strong&gt;post&lt;/strong&gt; ever&lt;/p&gt;</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Categories in YAML</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/01/27/categories.html"/>
          <updated>2009-01-27T00:00:00+11:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/01/27/categories</id>
          <content type="html">&lt;p&gt;Best &lt;strong&gt;post&lt;/strong&gt; ever&lt;/p&gt;</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Array categories in YAML</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/01/27/array-categories.html"/>
          <updated>2009-01-27T00:00:00+11:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2009/01/27/array-categories</id>
          <content type="html">&lt;p&gt;Best &lt;strong&gt;post&lt;/strong&gt; ever&lt;/p&gt;</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Include</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2008/12/13/include.html"/>
          <updated>2008-12-13T00:00:00+11:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2008/12/13/include</id>
          <content type="html">
&lt;p&gt;Included file ‘sig.markdown’ not found in &lt;em&gt;includes directory&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This &lt;em&gt;is&lt;/em&gt; cool&lt;/p&gt;
</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Topical Post</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/foo/2008/12/12/topical-post.html"/>
          <updated>2008-12-12T00:00:00+11:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/foo/2008/12/12/topical-post</id>
          <content type="html">&lt;h1&gt;Topical Post&lt;/h1&gt;
&lt;p&gt;This post has a topic.&lt;/p&gt;</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Post with Permalink</title>
          <link href="http://cromulent-testing.com/my_category/permalinked-post"/>
          <updated>2008-12-03T00:00:00+11:00</updated>
          <id>http://cromulent-testing.com/my_category/permalinked-post</id>
          <content type="html">&lt;h1&gt;Post with Permalink&lt;/h1&gt;
&lt;p&gt;Best &lt;strong&gt;post&lt;/strong&gt; ever&lt;/p&gt;</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Complex</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2008/11/21/complex.html"/>
          <updated>2008-11-21T00:00:00+11:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2008/11/21/complex</id>
          <content type="html">&lt;p&gt;url: /vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2008/11/21/complex.html&lt;br /&gt;
date: 2008-11-21 00:00:00 +1100&lt;br /&gt;
id: /vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2008/11/21/complex&lt;/p&gt;</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Foo Bar</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2008/10/18/foo-bar.html"/>
          <updated>2008-10-18T00:00:00+11:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2008/10/18/foo-bar</id>
          <content type="html">&lt;h1&gt;Foo Bar&lt;/h1&gt;
&lt;p&gt;Best &lt;strong&gt;post&lt;/strong&gt; ever&lt;/p&gt;</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Categories</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/category/2008/09/23/categories.html"/>
          <updated>2008-09-23T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/category/2008/09/23/categories</id>
          <content type="html">&lt;p&gt;Categories &lt;em&gt;should&lt;/em&gt; work&lt;/p&gt;</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Categories</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/z_category/2008/09/23/categories.html"/>
          <updated>2008-09-23T00:00:00+10:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/z_category/2008/09/23/categories</id>
          <content type="html">&lt;p&gt;Categories &lt;em&gt;should&lt;/em&gt; work. Even if ordered after index.&lt;/p&gt;</content>
        </entry>
      
    
  
    
    
    
    

    
      
        <entry>
          <title>Publish</title>
          <link href="http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2008/02/02/published.html"/>
          <updated>2008-02-02T00:00:00+11:00</updated>
          <id>http://cromulent-testing.com//vendor/bundle/ruby/2.0.0/gems/jekyll-0.11.0/test/source/2008/02/02/published</id>
          <content type="html">&lt;p&gt;This should be published.&lt;/p&gt;</content>
        </entry>
      
    
  
</feed>